<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <title>SiliconValley.Apartments</title>
  <meta name="generator" content="Bootply"/>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
  <!--[if lt IE 9]>
  <script src="//html5shim.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->
  <!--link href="css/styles.css" rel="stylesheet"-->
  <!-- script references -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCn08ZfcJ6WvhUEzB-SUICMYcFxrEF6-V8&libraries=places"></script>
  <!--script src="js/scripts.js"></script-->

  <!-- load handlebars.js from cdn, this is used for js templating-->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.6/handlebars.js"></script>

  <script src="https://use.fontawesome.com/44e70c01df.js"></script>

  <%= javascript_include_tag "map-boundries/relation-in-order.js" %>
  <%= javascript_include_tag "map-boundries/utility-functions.js" %>
  <%= javascript_include_tag "map-boundries/google.maps.Polygon.getBounds.js" %>
  <%= javascript_include_tag "map-boundries/city-boundaries-googlemaps.js" %>

  <%= stylesheet_link_tag "custom.css" %>

  <script type='text/javascript'>//<![CDATA[

  var geocoder;
  var map;
  var markers = []; // array of markers

  var activeNow;

  var has_map_clicked_upon = false;

  var is_polygon_draw_mode = false;

  var clickListener;
  var drawing_polygon=false;


  // initialize orange marker image
  var orangePinColor = "FF4500";
  var orangePinImage = new google.maps.MarkerImage("https://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|" + orangePinColor,
      new google.maps.Size(21, 34),
      new google.maps.Point(0, 0),
      new google.maps.Point(10, 34));

  // initialize yellow marker image
  var yellowPinColor = "ffff00";
  var yellowPinImage = new google.maps.MarkerImage("https://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|" + yellowPinColor,
      new google.maps.Size(21, 34),
      new google.maps.Point(0, 0),
      new google.maps.Point(10, 34));

  var properties = [];



  $(function() {
      $("#filter_btn").click(function () {
          has_map_clicked_upon=false;
          search();
          $('#filter_trigger_btn').click();
          //has_map_clicked_upon=false;
      });

      $("#search").keyup(function(event){
          if(event.keyCode == 13){
              has_map_clicked_upon=false;
              $("#search_btn_trigger").click();
              //has_map_clicked_upon=false;
          }
      });
  });


  function updateListingUsingMapBounds() {

      var bounds = map.getBounds();
      var NECorner = bounds.getNorthEast();
      var SWCorner = bounds.getSouthWest();
      var NWCorner = new google.maps.LatLng(NECorner.lat(), SWCorner.lng());
      var SECorner = new google.maps.LatLng(SWCorner.lat(), NECorner.lng());

      search(NECorner.lng() +" "+ NECorner.lat()+","+SECorner.lng() +" "+ SECorner.lat()+","+SWCorner.lng() +" "+ SWCorner.lat()+","+NWCorner.lng() +" "+ NWCorner.lat()+","+NECorner.lng() +" "+ NECorner.lat())
  }


  function search(coordinates) {
    var max_price = $("#max-price").val();
    var min_price = $("#min-price").val();
    var rooms = $("#rooms").val();
    var bathrooms = $("#bathrooms").val();
    var pets = $("#pets").val();
    var city_state = $("#search").val();
    getListings(city_state, max_price, min_price, rooms, bathrooms, pets, coordinates);
    if (typeof coordinates === 'undefined')
      has_map_clicked_upon=false;
    return false;
  }

  function initialize() {
      // check if filter's search box has no value then detect users location based on his ipaddress
      var searchBox = $("#search").val();
      if ($.trim(searchBox).length == 0) {
          $.get("https://ipinfo.io", function (response) {
              $.get("https://freegeoip.net/json/"+response.ip, function(geoResponse) {
                  if (geoResponse.city.length == 0) {
                      city = geoResponse.region_code;
                  } else {
                      city = geoResponse.city + ", " + geoResponse.region_code;
                  }
                  if (typeof city === 'undefined' || city.length == 0) {
                      city = "San Francisco, ca";
                  }
                  getListings(city);
              })

          }, "jsonp");
      } else {
          getListings(searchBox);
      }


  }

  function polygonButton(){
      var btn = $('<div class="polygon-button"><br /><button>Draw Region</button></div>');
      btn.bind('click', function(){
          is_polygon_draw_mode = !is_polygon_draw_mode;
          map.setOptions({draggable: !is_polygon_draw_mode});


      });
      return btn[0];
  }



  function getListings(city, max_price, min_price, bedrooms, bathrooms, pets, coordinates) {
      activeNow = undefined;
      //markers = [];
      if (typeof city === 'undefined' || city.length == 0) {
          city = "San Francisco, ca";
      }

      if (typeof max_price == 'undefined' || max_price <= 0) {
          max_price = -1; // show all listing of any price
      }

      if (typeof min_price === 'undefined' || min_price <= 0) {
          min_price = 0;
      }

      if (typeof bedrooms === 'undefined' || bedrooms <= 0) {
          bedrooms = 0;  // -1 means any bedrooms quantity
      }

      if (typeof bathrooms == 'undefined' || bathrooms <= 0) {
          bathrooms = 1; // -1 means any bathroom quantity
      }

      if (typeof pets == 'undefined') {
          pets = "Yes";
      }

      var show_url;
      if (typeof coordinates!=='undefined') {
          show_url = "/listings/show?pets=" + pets + "&bathrooms=" + bathrooms +
              "&bedrooms=" + bedrooms + "&max_price=" + max_price + "&min_price=" + min_price + "&coordinates=" + coordinates
      } else {
          show_url = '/listings/show?city=' + city.split(',')[0] + "&state=" + city.split(', ')[1] + "&pets=" + pets + "&bathrooms=" + bathrooms +
              "&bedrooms=" + bedrooms + "&max_price=" + max_price + "&min_price=" + min_price
      }

      $.getJSON(show_url, function (json) {

          // creating deep copy of returned jsonq
          properties = JSON.parse(JSON.stringify(json));


          var template = $('#properties-listing').html();
          var context = {
              data: properties
          };
          Handlebars.registerHelper("inc", function (value, options) {
              return parseInt(value) + 1;
          });

          if (typeof coordinates === 'undefined') {
              map = new google.maps.Map(document.getElementById('map-canvas'), {
                  mapTypeId: google.maps.MapTypeId.ROADMAP
              });
          }


          // markers will be shown on map for these coordinates
          var bounds = new google.maps.LatLngBounds();

          var templateScript = Handlebars.compile(template);
          var html = templateScript(context);

          // empty property list first
          $('#property-list ul').empty();
          $('#property-list ul').append(html);


          //Loop through all the markers and remove
          for (var i = 0; i < markers.length; i++) {
              markers[i].setMap(null);
          }
          markers = [];

          properties.forEach(function (property, index) {
              // to begin with all markers will be in orange color
              var marker = new google.maps.Marker({
                  position: new google.maps.LatLng(properties[index].latitude, properties[index].longitude),
                  map: map,
                  icon: orangePinImage
              });
              // markers will have id corresponding to their position in markers array
              marker.set("id", index + 1);

              // when mouse is over a marker it will turn yellow
              google.maps.event.addListener(marker, 'mouseover', function () {
                  marker.setIcon(yellowPinImage);
              });

              //when the mouse goes out of the marker, it will turn orange if it is not a marker which was clicked on (activeNow)
              google.maps.event.addListener(marker, 'mouseout', function () {
                  if (marker.get("id") != activeNow) {
                      marker.setIcon(orangePinImage);
                  }
              });

              // when a marker is clicked the corresponding property in the list will be scrolled to and marked with a blue border
              google.maps.event.addListener(marker, 'click', function () {
                  // inactivate the property and marker activated before the current marker was clicked
                  if (typeof activeNow != 'undefined') {
                      markers[activeNow - 1].setIcon(orangePinImage);
                      $('#property-list li:nth-child(' + markers[activeNow - 1].get("id") + ')').css('outline', '');
                  }

                  // scroll to property corresponding to the marker (use jquery for animation)
                  $('#property-list').animate({
                      scrollTop: $('#property-list li:nth-child(' + marker.get("id") + ')').position().top - $('#property-list li:first').position().top
                  }, 'slow');

                  // add blue border
                  $('#property-list ul').find(".list-group-item-warning").removeClass("list-group-item-warning");
                  $('#property-list ul li:nth-child(' + marker.get("id") + ')').addClass("list-group-item-warning");


                  activeNow = marker.get("id");
              });

              markers.push(marker);
              bounds.extend(marker.position);
          });
          if (typeof coordinates === 'undefined') {
          // position the map so that all markers are visible (only when search box is not empty)
          map.fitBounds(bounds);

          // if search box is empty when map is initialized, we should set the center of the map as below
          var searchBox = $("#search");
          if ($.trim(searchBox.val()).length == 0) {
              searchBox.val(city);

              var geocoder =  new google.maps.Geocoder();
              geocoder.geocode( { 'address': city}, function(results, status) {
                  if (status == google.maps.GeocoderStatus.OK) {
                      initialLocation = new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng());
                      map.setCenter(initialLocation);
                  } else {
                      console.log("Something went wrong while trying to get lat lon for city - " + city + " status - " + status);
                      geocoder.geocode( { 'address': 'San Francisco, CA'}, function(results, status) {
                          if (status == google.maps.GeocoderStatus.OK) {
                              initialLocation = new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng());
                              map.setCenter(initialLocation);
                          } else {
                              console.log("Something went wrong while trying to get lat lon for San Francisco also - " + status);
                          }
                      })
                  }

                  map.fitBounds(results[0].geometry.viewport);
              });
          }
              map.controls[google.maps.ControlPosition.TOP_RIGHT].push(polygonButton());

               loadCityLimits();
           }

          map.dragInProgress = false; //adding flag to already existing map object to keep DOM clean
          google.maps.event.addListener(map, 'dragend', function() {
              if(map.dragInProgress == false && has_map_clicked_upon == true) { //only first shall pass
                  map.dragInProgress = true;
                  window.setTimeout(function() {
                      updateListingUsingMapBounds();
                      map.dragInProgress = false; //reset the flag for next drag
                  }, 700);
              }
          });


          map.dragInProgress = false; //adding flag to already existing map object to keep DOM clean
          google.maps.event.addListener(map, 'zoom_changed', function() {
              if(map.dragInProgress == false && has_map_clicked_upon == true) { //only first shall pass
                  map.dragInProgress = true;
                  window.setTimeout(function() {
                      updateListingUsingMapBounds();
                      map.dragInProgress = false; //reset the flag for next drag
                  }, 700);
              }
          });

          if (typeof clickListener !== 'undefined')
              google.maps.event.removeListener(clickListener);

          clickListener = google.maps.event.addListenerOnce(map, 'click', function() {


              if (drawing_polygon) {
                  drawing_polygon = false;
                  return;
              }
              has_map_clicked_upon = true;



              // clear city limits
              while (allOverlays[0]) {
                  allOverlays.pop().setMap(null);
              }
              window.setTimeout(function() {
                updateListingUsingMapBounds();
              }, 700);
          });


          /*google.maps.event.addDomListener(map.getDiv(),'mousedown',function(e){


              //do it with the right mouse-button only
              if(e.button!=0)
              {
                  return;
              }




              if (typeof poly !== 'undefined') {
                  while(poly.getPath().length) {
                      poly.getPath().pop();
                  }
              }

              if (!is_polygon_draw_mode) {
                  return;
              }

              drawing_polygon=true;

              map.setOptions({draggable: false});

              poly=new google.maps.Polyline({map:map,clickable:false});
              //move-listener
              var move=google.maps.event.addListener(map,'mousemove',function(e){
                  if (is_polygon_draw_mode) {
                      poly.getPath().push(e.latLng);
                  }
              });
              //mouseup-listener
              google.maps.event.addListenerOnce(map,'mouseup',function(e){

                  if (!is_polygon_draw_mode) {
                      return;
                  }

                  is_polygon_draw_mode = false;

                  drawing_polygon=true;
                  has_map_clicked_upon = false;

                  google.maps.event.removeListener(move);
                  var path=poly.getPath();

                  poly=new google.maps.Polygon({map:map,path:path});
                  map.setOptions({draggable: true});




              });



          });*/


      });
  }

  // call initialize method to load map on window load
  google.maps.event.addDomListener(window, "load", initialize);


  // called when mouse goes on or out of a property in the property list
  showme = function (index) {

      // inactivate the property and marker activated before the current marker was clicked
      if (typeof activeNow != 'undefined') {
          markers[activeNow - 1].setIcon(orangePinImage);
          $('#property-list li:nth-child(' + markers[activeNow - 1].get("id") + ')').css('outline', '');
      }

      if (markers[index].getAnimation() != google.maps.Animation.BOUNCE) {
          // make marker bounce
          markers[index].setAnimation(google.maps.Animation.BOUNCE);
          // make marker turn yellow
          markers[index].setIcon(yellowPinImage);
      } else {
          // make marker orange
          markers[index].setIcon(orangePinImage);
          // stop bouncing
          markers[index].setAnimation(null);
      }
  }

  //]]>

  </script>

</head>
<body>
<!-- begin template -->
<div class="navbar navbar-custom navbar-fixed-top">
  <div class="navbar-header"><a class="navbar-brand" href="#">SiliconValley.Apartments</a>
    <a class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
      <span class="icon-bar"></span>
      <span class="icon-bar"></span>
      <span class="icon-bar"></span>
    </a>
  </div>
  <div class="navbar-collapse collapse">
    <ul class="nav navbar-nav">
      <li class="active"><a href="/listings/new">Add a Listing</a></li>
      <li><a href="/users">Manage Listings</a></li>
    </ul>

  </div>
</div>

<div id="map-canvas" class="hidden-xs hidden-sm"></div>
<div class="container-fluid" id="main">
  <div class="row">
    <div class="col-xs-1 col-sm-1 hidden-md hidden-lg"></div>
    <div class="col-xs-10 col-sm-10 col-md-3 col-lg-3" id="left" style="padding-left: 0px;">
      <div class="col-xs-1 col-sm-1 hidden-md hidden-lg"></div>
      <div id="sidebar">
        <ul class="list-group" style="margin: 3px;">
          <li class="list-group-item">
            <form>
              <div class="form-group" style="display:inline;">
                <div class="input-group">
                  <div class="input-group-btn">
                    <button type="button" class="btn btn-default dropdown-toggle" id="filter_trigger_btn" data-toggle="dropdown">
                      <span class="glyphicon glyphicon-filter"></span>
                    </button>

                      <div class="dropdown-menu" role="menu">

                        <div class="form-group" style="clear:both; padding-top: 10px;">
                          <label for="bedrooms">Min Rooms:</label>
                          <select class="form-control" id="rooms">
                            <option value="0">0</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="4">4+</option>
                          </select>
                        </div>
                        <div class="form-group" style="clear:both;">
                          <label for="bathrooms">Min Bathrooms:</label>
                          <select class="form-control" id="bathrooms">
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="4">4+</option>
                          </select>
                        </div>
                        <div class="form-group" style="clear:both;">
                          <label for="pets">Pets:</label>
                          <select class="form-control" id="pets">
                            <option value="Yes" selected="">yes</option>
                            <option value="No">no</option>
                          </select>
                        </div>

                        <div class="form-group" style="clear:both; padding-top: 10px;">
                          <label for="rent" class="col-sm-4 control-label" style="padding-left: 0px;">Rent
                            Between:</label>
                          <div class="col-sm-8">
                            <input type="text" class="form-control" id="max-price" placeholder="Max" dcvalue="">
                            <br><br>
                            <input type="text" class="form-control" id="min-price" placeholder="Min" dcvalue="">
                          </div>
                          <div style="clear:both; padding-top: 10px;">
                            <input type="button" id="filter_btn" class="btn btn-primary btn-block" value="Search" />
                          </div>
                        </div>
                      </div>

                  </div>
                  <input type="text" id="search" class="form-control" placeholder="Search using Zip/City/Address">
                  <div class="input-group-addon" id="search_btn_trigger" style="cursor: pointer;" onclick="search()"><span class="glyphicon glyphicon-search"></span> </div>
                </div>
              </div>
            </form>

          </li>
        </ul>
      </div>



      <div id="property-list">

        <!-- item list -->
        <ul class="list-group thumbnails">

        </ul>
      </div>

      <div class="col-xs-8"><!--map-canvas will be postioned here--></div>
    </div>
  </div>
  <!-- end template -->

  <script type="text/javascript">
      // to stop filter form from closing on select click
      $('.dropdown-menu').click(function (e) {
          e.stopPropagation();
      });
  </script>


  <script id="properties-listing" type="text/x-handlebars-template">
    {{#each data}}
    <li class="list-group-item" onmouseover="showme({{@index}})" onmouseout="showme({{@index}})">
      <div class="panel panel-default relative" style="margin-bottom: 10px; zoom: 1; opacity: 1;">
        <div class="cover hover overlay margin-none" style="min-height: 139px;">
          <img src= "{{pictures.0.picture_json.url}}" class="img-responsive" style="width: 100%; height: auto; display: block; margin-left: auto; margin-right: auto;">
          </span>
          </a>
        </div>
        <div class="panel-body">
          <h4 class="margin-v-0-5">{{streetname}}</h4>
          <p>{{city}}</p>
          <span class="label label-grey-100">${{price}}</span>&nbsp;
        </div>


        <div class="listings-grid__attrs">
          <div class="listings-grid__attr"><i class="glyphicon glyphicon-bed"></i> {{bedrooms}}</div>
          <div class="listings-grid__attr"><i class="fa fa-shower"></i> {{bathrooms}}</div>
          <div class="listings-grid__attr"><i class="glyphicon glyphicon-fullscreen"></i> {{sq_ft}} sq ft</div>
        </div>
      </div>

    </li>
    {{/each}}
  </script>

</body>
</html>